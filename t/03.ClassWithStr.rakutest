use Test;
use PrettyDump;

plan 5;

my $p = PrettyDump.new;

# This class should respond to .Str
class TinyClass {
    has $.foo = 10;
    method Str { "foo is ｢$.foo｣" }
}

my $tiny-class-str = 'TinyClass';
my $tiny-class = ::($tiny-class-str);

is PrettyDump.can( $tiny-class-str ).elems, 0, "PrettyDump does not handle $tiny-class-str";

can-ok $tiny-class, 'can';
is $tiny-class.can( 'Str' ).Bool, True, "$tiny-class-str does .Str";
is $tiny-class.can( 'PrettyDump' ).elems, 0, "$tiny-class-str does not do .PrettyDump";

subtest 'Object with .Str' => {
    my $object = $tiny-class.new: :foo(137);
    isa-ok $object, $tiny-class;

    my $string = $p.dump: $object;
    isa-ok $string, Str, 'Got Str back';
    my $expected = qq/($tiny-class-str): foo is ｢137｣/;

    is $string, $expected, 'Dumping $object returns expected string';
},

# vim: expandtab shiftwidth=4
