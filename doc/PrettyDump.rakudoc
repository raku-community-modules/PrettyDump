=begin pod

=head1 NAME

PrettyDump - represent a Raku data structure in a human readable way

=head1 SYNOPSIS

Use it in the OO fashion:

=begin code :lang<raku>

use PrettyDump;
my $pretty = PrettyDump.new: :after-opening-brace;

my $raku = { a => 1 };
say $pretty.dump: $raku; # '{:a(1)}'

=end code

Or, use its subroutine:

=begin code :lang<raku>

use PrettyDump;

my $ds = { a => 1 };

say pretty-dump( $ds );

# setting named arguments
say pretty-dump( $ds, :indent<\t>);

=end code

Or, a shorter shortcut that dumps and outputs to standard output:

=begin code :lang<raku>

use PrettyDump;

my $ds = { a => 1 };
pd $ds;

=end code

=head1 DESCRIPTION

This module creates nicely formatted representations of your data
structure for your viewing pleasure. It does not create valid Raku
code and is not a serialization tool.

When C<.dump> encounters an object in your data structure, it first
checks for a C<.PrettyDump> method. It that exists, it uses it to
stringify that object. Otherwise, C<.dump> looks for internal methods.
So far, this module handles these types internally:

=item List
=item Array
=item Pair
=item Map
=item Hash
=item Match

=head2 Custom dump methods

If you define a C<.PrettyDump> method in your class, C<.dump> will call
that when it encounters an object in that class. The first argument to
C<.PrettyDump> is the dumper object, so you have access to some things
in that class:

=begin code :lang<raku>

class Butterfly {
    has $.genus;
    has $.species;

    method PrettyDump ( PrettyDump $pretty, Int:D :$depth = 0 ) {
        "_{$.genus} {$.species}_";
    }
}

=end code

The second argument is the level of indentation so far. If you want to
dump other objects that your object contains, you should call C<.dump>
again and pass it the value of C<$depth+1> as it's second argument:

=begin code :lang<raku>

class Butterfly {
    has $.genus;
    has $.species;
    has $.some-other-object;

    method PrettyDump ( PrettyDump $pretty, Int:D :$depth = 0 ) {
        "_{$.genus} {$.species}_" ~
        $pretty.dump: $some-other-object, $depth + 1;
    }
}

=end code

You can add a C<PrettyDump> method to an object with C<but role>:

=begin code :lang<raku>

use PrettyDump;

my $pretty = PrettyDump.new;

my Int $a = 137;
put $pretty.dump: $a;

my $b = $a but role {
    method PrettyDump ( PrettyDump:D $pretty, Int:D :$depth = 0 ) {
        "({self.^name}) {self}";
    }
}
put $pretty.dump: $b;

=end code

This outputs:

=begin output

137
(Int+{<anon|140644552324304>}) 137

=end output

=head2 Per-object dump handlers

You can add custom handlers to your C<PrettyDump> object. Once added,
the object will try to use a handler first. This means that you can
override builtin methods.

=begin code :lang<raku>

$pretty = PrettyDump.new: ... ;
$pretty.add-handler: "SomeTypeNameStr", $code-thingy;

=end code

The code signature for C<$code-thingy> must be:

=begin code :lang<raku>

(PrettyDump $pretty, $ds, Int:D :$depth = 0 --> Str)

=end code

Once you are done with the per-object handler, you can remove it:

=begin code :lang<raku>

$pretty.remove-handler: "SomeTypeNameStr";

=end code

This allows you to temporarily override a builtin method. You might
want to mute a particular object, for instance.

You can completely ignore a type as if it's not even there. It's a
wrapper around g that supplies the code for you.

=begin code :lang<raku>

$pretty.ignore-type: SomeType;

=end code

This works by returning a C<Str> type object instead of a defined
string. If the type you want to exclude is at the top of the data
structure, you'll get back a type object. But why are you dumpng
something you want to ignore?

=head2 Formatting and Configuration

You can set some tidy-like settings to control how C<.dump> will
present the data stucture:

=item debug

Output debugging info to watch the module walk the data structure.

=item indent

The default is a tab.

=item intra-group-spacing

The spacing inserted inside (empty) C<${}> and C<$[]> constructs.
The default is the empty string.

=item pre-item-spacing

The spacing inserted just after the opening brace or bracket of
non-empty C<${}> and C<$[]> constructs. The default is a newline.

=item post-item-spacing

The spacing inserted just before the close brace or bracket of
non-empty C<${}> and C<$[]> constructs. The default is a newline.

=item pre-separator-spacing

The spacing inserted just before the comma separator of non-empty
C<${}> and C<$[]> constructs. The default is the empty string.

=item post-separator-spacing

The spacing inserted just after the comma separator of non-empty
C<${}> and C<$[]> constructs. Defaults to a newline.

=head1 AUTHORS

=item brian d foy
=item Raku Community

This module started as C<Pretty::Printer> from Jeff Goff.

Parts of this module were supported by a grant from TPRF.

=head1 COPYRIGHT

Copyright © 2017-2021, brian d foy

Copyright © 2024 Raku Community

=head1 LICENSE

This module is available under the Artistic License 2.0. A copy of
this license should have come with this distribution in the LICENSE
file.

=end pod

# vim: expandtab shiftwidth=4
